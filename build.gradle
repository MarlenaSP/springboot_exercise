import java.time.LocalDateTime

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

compileJava {
    options.compilerArgs << '-parameters'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task generatePostsAndComments() {
	doLast {
		File dataSql = file("src/main/resources/data.sql")
		dataSql.write("")
		//posty
		for(int i = 1; i<=100; i++){
			dataSql.append("insert into post(title, content, created)" +
					"values ('Test post ${i}', 'Content ${i}', '"+ LocalDateTime.now().minusDays(100-i) + "');\n")
		}
		//komentarze
		for(int i = 1; i<=100; i++){
			int postId = 1+i /10
			dataSql.append("insert into comment(post_id, content, created)" +
					"values (${postId}, 'Comment ${i}', '"+ LocalDateTime.now().minusDays(100-i) + "');\n")
		}
	}
}